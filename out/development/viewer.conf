name: DU-logger-viewer viewer
slots:
  screen:
    name: screen
    class: ScreenUnit
    select: null
    type:
      events: []
      methods: []
  sysdata:
    name: sysdata
    class: DataBankUnit
    select: null
    type:
      events: []
      methods: []
handlers:
  screen:
    "onMouseDown(x,y)":
      lua: screen:triggerEvent('onMouseDown',x,y)
    "onMouseUp(x,y)":
      lua: screen:triggerEvent('onMouseUp',x,y)
    onOutputChanged(output):
      lua: screen:triggerEvent('onOutputChanged',output)
  sysdata: {}
  library:
    onStart():
      lua: >-
        ;(function()

        local a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end

        end)()

        ;(function()

        local a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end

        end)()

        package.preload['DU-logger-viewer:globals.lua']=(function()

        -- Initialize globals and constants

        Config = { core = nil, c_required=true, databanks = {}, db_required=true, screens = {}, s_required=true }

        DEBUG = false

        INGAME = system ~= nil


        if not INGAME then

            function traceback(o)
                if o then P(tostring(o)) end
            end
        else
            --require 'mockfuncs'
            print=system.print
        end

        P=print

        end)

        package.preload['DU-logger-viewer:startup.lua']=(function()

        -- startup for initial config like slots detection

        local status, err=false,nil

        if INGAME then
            ---@diagnostic disable-next-line: undefined-global
            status, err, _ = xpcall(function()
                if Config.c_required then
                    Config.core = library.getCoreUnit()
                end
                if Config.db_required then
                    Config.databanks = library.getLinksByClass('DataBank', true) -- true is important!
                end
                if Config.s_required then
                    Config.screens = library.getLinksByClass('Screen', true)
                end
            end, traceback)
            if not status then
                P("Error in Link Detection:\n" .. err)
                unit.exit()
                return
            end
        else
            -- use mocks
            Config.core = unit.core
            Config.databanks =  { unit.databank }
            Config.screens =  { unit.screen }
        end


        if #Config.databanks > 0 then
            local plural = ""
            if #Config.databanks > 1 then plural = "s" else plural = " '"..Config.databanks[1].getName().."'" end
            P(#Config.databanks .. " databank" .. plural .. " connected.")
        else
            P("[E] DataBank not found.")
        end

        if #Config.screens > 0 then
            local plural = ""
            if #Config.screens > 1 then plural = "s" end
            P(#Config.screens .. " screen" .. plural .. " connected.")
        end

        end)

        package.preload['DU-logger-viewer:viewer-screen.onOutputChanged.lua']=(function()

        local outputChanged = {}

        function outputChanged.Run(output)
            local hasData = false
            local screenoutput = output --normally: Screen.getScriptOutput()
            local screeninput = ""
            if screenoutput == "" then
                screeninput = "?"
            else
                if screenoutput == "<" then -- previous key        
                    if Page > 1 then
                        Page = Page - 1
                    end
                    if DBKeys[Page] and Databank.hasKey(DBKeys[Page]) then
                        screeninput = "KEY:"..DBKeys[Page]
                    end
                elseif screenoutput == ">" then -- next key
                    if Page < NBKeys then
                        Page = Page + 1
                    end
                    if DBKeys[Page] and Databank.hasKey(DBKeys[Page]) then
                        screeninput = "KEY:"..DBKeys[Page]
                    end
                elseif screenoutput == "KEYOK" then -- key accepted, send val now        
                    if DBKeys[Page] and Databank.hasKey(DBKeys[Page]) then
                        screeninput = "VAL:"..Databank.getStringValue(DBKeys[Page])
                        hasData = true
                    end
                --else command not understood
                end
            end
            Screen.setScriptInput(screeninput)
            Screen.clearScriptOutput()
            if DEBUG then
                P("*Screen OUT: "..screenoutput)
                local out = "*Screen IN: "
                if hasData then
                    out = out .. "***"
                else
                    out = out .. screeninput
                end
                P(out)
            end
        end

        return outputChanged

        end)

        package.preload['DU-logger-viewer:viewer-main.lua']=(function()

        -- Main viewer script. Assumes Databank and Screen were already assigned!

        Page = 1

        local out = ""

        NBKeys = Databank.getNbKeys()

        if not NBKeys then
            P("[E] Databank is empty!")
        else
            DBKeys = Databank.getKeyList()
            if DBKeys and #DBKeys > 0 then
                local hasKeys = true
                if #DBKeys == 1 then
                    P("1 entry found.")
                else
                    P(#DBKeys.." entries found.")
                end
                -- get first key+value to send to screen
                for k,v in ipairs(DBKeys) do
                    if DEBUG then P("Player ID "..v.." found.") end
                    if out == "" then
                        out = "KEY:"..tostring(v)
                    end
                end
            end
        end

        Screen.activate()

        local screenoutput = Screen.getScriptOutput()

        local screeninput = out

        Screen.setScriptInput(screeninput)

        Screen.clearScriptOutput()

        if DEBUG then
            P("Screen OUT: " .. screenoutput)
            P("Screen IN: " .. screeninput)
        end

        end)

        library.addEventHandlers(library)

        library.addEventHandlers(system)

        library.addEventHandlers(player)

        library.addEventHandlers(construct)

        library.addEventHandlers(unit)

        library.addEventHandlers(screen)

        library.addEventHandlers(sysdata)
  system:
    onActionStart(action):
      lua: system:triggerEvent('onActionStart',action)
    onActionLoop(action):
      lua: system:triggerEvent('onActionLoop',action)
    onActionStop(action):
      lua: system:triggerEvent('onActionStop',action)
    onUpdate():
      lua: system:triggerEvent('onUpdate')
    onFlush():
      lua: system:triggerEvent('onFlush')
    onInputText(text):
      lua: system:triggerEvent('onInputText',text)
    onCameraChanged(mode):
      lua: system:triggerEvent('onCameraChanged',mode)
  player:
    "onParentChanged(oldId,newId)":
      lua: player:triggerEvent('onParentChanged',oldId,newId)
  construct:
    onDocked(id):
      lua: construct:triggerEvent('onDocked',id)
    onUndocked(id):
      lua: construct:triggerEvent('onUndocked',id)
    onPlayerBoarded(id):
      lua: construct:triggerEvent('onPlayerBoarded',id)
    onVRStationEntered(id):
      lua: construct:triggerEvent('onVRStationEntered',id)
    onConstructDocked(id):
      lua: construct:triggerEvent('onConstructDocked',id)
    onPvPTimer(active):
      lua: construct:triggerEvent('onPvPTimer',active)
  unit:
    onStop():
      lua: unit:triggerEvent('onStop')
    onTimer(timerId):
      lua: unit:triggerEvent('onTimer',timerId)
    onStart():
      lua: >-
        -- DU-Logger-Viewer by tobitege, based on Jason Bloomer LUA scripts.

        -- Programming board script to display data on screen which is 

        -- stored in a databank by the logger script.

        -- This is basically a wrapper around the actual, main script in viewer-main.lua


        -- First some setup code to allow debugging in VSCode

        ---@diagnostic disable: param-type-mismatch

        package.path = "lua/?.lua;util/?.lua;"..package.path


        require('DU-logger-viewer:globals.lua')


        -- startup has all the Config setup with links detection

        Config.core_required = false

        local status, err, _ = xpcall(function() require('DU-logger-viewer:startup.lua') end, traceback)

        if not status then
            P("[E] Error in startup!")
            if err then P(err) end
            unit.exit()
            return
        end


        Databank = Config.databanks[1]

        Screen = Config.screens[1]


        local screenEvent = require('DU-logger-viewer:viewer-screen.onOutputChanged.lua')

        if screenEvent ~= nil then
            Screen:onEvent('onOutputChanged', function (self, output) screenEvent.Run(output) end)
        end


        status, err, _ = xpcall(function() require('DU-logger-viewer:viewer-main.lua') end, traceback)

        if not status then
            P("[E] Error in viewer-main!")
            if err then P(err) end
            unit.exit()
        end
