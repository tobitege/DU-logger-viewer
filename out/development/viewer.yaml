slots:
  "0":
    name: screen
    class: ScreenUnit
    select: null
    type:
      events: []
      methods: []
  "1":
    name: sysdata
    class: DataBankUnit
    select: null
    type:
      events: []
      methods: []
  "-5":
    name: library
    class: null
    select: null
    type:
      events: []
      methods: []
  "-4":
    name: system
    class: null
    select: null
    type:
      events: []
      methods: []
  "-3":
    name: player
    class: null
    select: null
    type:
      events: []
      methods: []
  "-2":
    name: construct
    class: null
    select: null
    type:
      events: []
      methods: []
  "-1":
    name: unit
    class: null
    select: null
    type:
      events: []
      methods: []
handlers:
  - key: 1
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: >-
      ;(function()

      local a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end

      end)()
  - key: 2
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: >-
      ;(function()

      local a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end

      end)()
  - key: 3
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: >-
      package.preload['DU-logger-viewer:globals.lua']=(function()

      -- Initialize globals and constants

      Config = { core = nil, c_required=true, databanks = {}, db_required=true, screens = {}, s_required=true }

      DEBUG = false

      INGAME = system ~= nil


      if not INGAME then

          function traceback(o)
              if o then P(tostring(o)) end
          end
      else
          --require 'mockfuncs'
          print=system.print
      end

      P=print

      end)

      package.preload['DU-logger-viewer:startup.lua']=(function()

      -- startup for initial config like slots detection

      local status, err=false,nil

      if INGAME then
          ---@diagnostic disable-next-line: undefined-global
          status, err, _ = xpcall(function()
              if Config.c_required then
                  Config.core = library.getCoreUnit()
              end
              if Config.db_required then
                  Config.databanks = library.getLinksByClass('DataBank', true) -- true is important!
              end
              if Config.s_required then
                  Config.screens = library.getLinksByClass('Screen', true)
              end
          end, traceback)
          if not status then
              P("Error in Link Detection:\n" .. err)
              unit.exit()
              return
          end
      else
          -- use mocks
          Config.core = unit.core
          Config.databanks =  { unit.databank }
          Config.screens =  { unit.screen }
      end


      if #Config.databanks > 0 then
          local plural = ""
          if #Config.databanks > 1 then plural = "s" else plural = " '"..Config.databanks[1].getName().."'" end
          P(#Config.databanks .. " databank" .. plural .. " connected.")
      else
          P("[E] DataBank not found.")
      end

      if #Config.screens > 0 then
          local plural = ""
          if #Config.screens > 1 then plural = "s" end
          P(#Config.screens .. " screen" .. plural .. " connected.")
      end

      end)

      package.preload['DU-logger-viewer:viewer-screen.onOutputChanged.lua']=(function()

      local outputChanged = {}

      function outputChanged.Run(output)
          local hasData = false
          local screenoutput = output --normally: Screen.getScriptOutput()
          local screeninput = ""
          if screenoutput == "" then
              screeninput = "?"
          else
              if screenoutput == "<" then -- previous key        
                  if Page > 1 then
                      Page = Page - 1
                  end
                  if DBKeys[Page] and Databank.hasKey(DBKeys[Page]) then
                      screeninput = "KEY:"..DBKeys[Page]
                  end
              elseif screenoutput == ">" then -- next key
                  if Page < NBKeys then
                      Page = Page + 1
                  end
                  if DBKeys[Page] and Databank.hasKey(DBKeys[Page]) then
                      screeninput = "KEY:"..DBKeys[Page]
                  end
              elseif screenoutput == "KEYOK" then -- key accepted, send val now        
                  if DBKeys[Page] and Databank.hasKey(DBKeys[Page]) then
                      screeninput = "VAL:"..Databank.getStringValue(DBKeys[Page])
                      hasData = true
                  end
              --else command not understood
              end
          end
          Screen.setScriptInput(screeninput)
          Screen.clearScriptOutput()
          if DEBUG then
              P("*Screen OUT: "..screenoutput)
              local out = "*Screen IN: "
              if hasData then
                  out = out .. "***"
              else
                  out = out .. screeninput
              end
              P(out)
          end
      end

      return outputChanged

      end)

      package.preload['DU-logger-viewer:viewer-main.lua']=(function()

      -- Main viewer script. Assumes Databank and Screen were already assigned!

      Page = 1

      local out = ""

      NBKeys = Databank.getNbKeys()

      if not NBKeys then
          P("[E] Databank is empty!")
      else
          DBKeys = Databank.getKeyList()
          if DBKeys and #DBKeys > 0 then
              local hasKeys = true
              if #DBKeys == 1 then
                  P("1 entry found.")
              else
                  P(#DBKeys.." entries found.")
              end
              -- get first key+value to send to screen
              for k,v in ipairs(DBKeys) do
                  if DEBUG then P("Player ID "..v.." found.") end
                  if out == "" then
                      out = "KEY:"..tostring(v)
                  end
              end
          end
      end

      Screen.activate()

      local screenoutput = Screen.getScriptOutput()

      local screeninput = out

      Screen.setScriptInput(screeninput)

      Screen.clearScriptOutput()

      if DEBUG then
          P("Screen OUT: " .. screenoutput)
          P("Screen IN: " .. screeninput)
      end

      end)
  - key: 4
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: |-
      library.addEventHandlers(library)
      library.addEventHandlers(system)
      library.addEventHandlers(player)
      library.addEventHandlers(construct)
      library.addEventHandlers(unit)
      library.addEventHandlers(screen)
      library.addEventHandlers(sysdata)
  - key: 5
    filter:
      slotKey: -4
      signature: onActionStart(action)
      args:
        - variable: "*"
    code: system:triggerEvent('onActionStart',action)
  - key: 6
    filter:
      slotKey: -4
      signature: onActionLoop(action)
      args:
        - variable: "*"
    code: system:triggerEvent('onActionLoop',action)
  - key: 7
    filter:
      slotKey: -4
      signature: onActionStop(action)
      args:
        - variable: "*"
    code: system:triggerEvent('onActionStop',action)
  - key: 8
    filter:
      slotKey: -4
      signature: onUpdate()
      args: []
    code: system:triggerEvent('onUpdate')
  - key: 9
    filter:
      slotKey: -4
      signature: onFlush()
      args: []
    code: system:triggerEvent('onFlush')
  - key: 10
    filter:
      slotKey: -4
      signature: onInputText(text)
      args:
        - variable: "*"
    code: system:triggerEvent('onInputText',text)
  - key: 11
    filter:
      slotKey: -4
      signature: onCameraChanged(mode)
      args:
        - variable: "*"
    code: system:triggerEvent('onCameraChanged',mode)
  - key: 12
    filter:
      slotKey: -3
      signature: onParentChanged(oldId,newId)
      args:
        - variable: "*"
        - variable: "*"
    code: player:triggerEvent('onParentChanged',oldId,newId)
  - key: 13
    filter:
      slotKey: -2
      signature: onDocked(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onDocked',id)
  - key: 14
    filter:
      slotKey: -2
      signature: onUndocked(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onUndocked',id)
  - key: 15
    filter:
      slotKey: -2
      signature: onPlayerBoarded(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onPlayerBoarded',id)
  - key: 16
    filter:
      slotKey: -2
      signature: onVRStationEntered(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onVRStationEntered',id)
  - key: 17
    filter:
      slotKey: -2
      signature: onConstructDocked(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onConstructDocked',id)
  - key: 18
    filter:
      slotKey: -2
      signature: onPvPTimer(active)
      args:
        - variable: "*"
    code: construct:triggerEvent('onPvPTimer',active)
  - key: 19
    filter:
      slotKey: -1
      signature: onStop()
      args: []
    code: unit:triggerEvent('onStop')
  - key: 20
    filter:
      slotKey: -1
      signature: onTimer(timerId)
      args:
        - variable: "*"
    code: unit:triggerEvent('onTimer',timerId)
  - key: 21
    filter:
      slotKey: 0
      signature: onMouseDown(x,y)
      args:
        - variable: "*"
        - variable: "*"
    code: screen:triggerEvent('onMouseDown',x,y)
  - key: 22
    filter:
      slotKey: 0
      signature: onMouseUp(x,y)
      args:
        - variable: "*"
        - variable: "*"
    code: screen:triggerEvent('onMouseUp',x,y)
  - key: 23
    filter:
      slotKey: 0
      signature: onOutputChanged(output)
      args:
        - variable: "*"
    code: screen:triggerEvent('onOutputChanged',output)
  - key: 24
    filter:
      slotKey: -1
      signature: onStart()
      args: []
    code: >-
      

      -- DU-Logger-Viewer by tobitege, based on Jason Bloomer LUA scripts.

      -- Programming board script to display data on screen which is 

      -- stored in a databank by the logger script.

      -- This is basically a wrapper around the actual, main script in viewer-main.lua


      -- First some setup code to allow debugging in VSCode

      ---@diagnostic disable: param-type-mismatch

      package.path = "lua/?.lua;util/?.lua;"..package.path


      require('DU-logger-viewer:globals.lua')


      -- startup has all the Config setup with links detection

      Config.core_required = false

      local status, err, _ = xpcall(function() require('DU-logger-viewer:startup.lua') end, traceback)

      if not status then
          P("[E] Error in startup!")
          if err then P(err) end
          unit.exit()
          return
      end


      Databank = Config.databanks[1]

      Screen = Config.screens[1]


      local screenEvent = require('DU-logger-viewer:viewer-screen.onOutputChanged.lua')

      if screenEvent ~= nil then
          Screen:onEvent('onOutputChanged', function (self, output) screenEvent.Run(output) end)
      end


      status, err, _ = xpcall(function() require('DU-logger-viewer:viewer-main.lua') end, traceback)

      if not status then
          P("[E] Error in viewer-main!")
          if err then P(err) end
          unit.exit()
      end
events: []
methods: []
