{"slots":{"0":{"name":"core","class":"CoreUnit","type":{"events":[],"methods":[]}},"1":{"name":"orgdata","class":"DataBankUnit","type":{"events":[],"methods":[]}},"2":{"name":"sysdata","class":"DataBankUnit","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}},"handlers":[{"key":1,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":";(function()\nlocal a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end\nend)()"},{"key":2,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":";(function()\nlocal a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end\nend)()"},{"key":3,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":"package.preload['DU-logger-viewer:globals.lua']=(function()\n-- Initialize globals and constants\nConfig = { core = nil, c_required=true, databanks = {}, db_required=true, screens = {}, s_required=true }\nDEBUG = false\nINGAME = system ~= nil\n\nif not INGAME then\n\n    function traceback(o)\n        if o then P(tostring(o)) end\n    end\nelse\n    --require 'mockfuncs'\n    print=system.print\nend\nP=print\nend)\npackage.preload['DU-logger-viewer:startup.lua']=(function()\n-- startup for initial config like slots detection\nlocal status, err=false,nil\nif INGAME then\n    ---@diagnostic disable-next-line: undefined-global\n    status, err, _ = xpcall(function()\n        if Config.c_required then\n            Config.core = library.getCoreUnit()\n        end\n        if Config.db_required then\n            Config.databanks = library.getLinksByClass('DataBank', true) -- true is important!\n        end\n        if Config.s_required then\n            Config.screens = library.getLinksByClass('Screen', true)\n        end\n    end, traceback)\n    if not status then\n        P(\"Error in Link Detection:\\n\" .. err)\n        unit.exit()\n        return\n    end\nelse\n    -- use mocks\n    Config.core = unit.core\n    Config.databanks =  { unit.databank }\n    Config.screens =  { unit.screen }\nend\n\nif #Config.databanks > 0 then\n    local plural = \"\"\n    if #Config.databanks > 1 then plural = \"s\" else plural = \" '\"..Config.databanks[1].getName()..\"'\" end\n    P(#Config.databanks .. \" databank\" .. plural .. \" connected.\")\nelse\n    P(\"[E] DataBank not found.\")\nend\nif #Config.screens > 0 then\n    local plural = \"\"\n    if #Config.screens > 1 then plural = \"s\" end\n    P(#Config.screens .. \" screen\" .. plural .. \" connected.\")\nend\nend)\npackage.preload['DU-logger-viewer:logger-library.lua']=(function()\nfunction EndsWith(s, suffix)\n    if not s or not suffix then return false end\n    return string.sub(s, -#suffix) == suffix\nend\n\nfunction Rtrim(s)\n    local res, _ = string.gsub(s, \"%s+$\", \"\")\n    return res\nend\n\nfunction RtrimChar(s,char)\n    if not s or not char then return s end\n    while #s > 0 and EndsWith(s, char) do\n        s = string.sub(s,1,#s - #char)\n    end\n    return s\nend\n\nfunction DumpTable(o)\n   -- omitt any spaces in s!\n   if type(o) == 'table' then\n      local s = '{'\n      for k,v in pairs(o) do\n         if type(k) ~= 'number' then k = '\"'..k..'\"' end\n         s = s .. '['..k..']=' .. DumpTable(v) .. ','\n      end\n      s = RtrimChar(s,\",\")\n      return s .. '}'\n   else\n      return tostring(o)\n   end\nend\n\nfunction TableConstructor(plname,plmass,plvol,plvolmax,plorgs,logtime,logtimeoff,plwpos,plwvelo,plparent,plisseated,plseatid,plsprint,pljetpack,plheadlight)\n    local t = {name = plname, mass = plmass, volume = plvol, volumemax = plvolmax,\n        orgs = plorgs, time = logtime, timeoffset = logtimeoff, pos = plwpos,\n        velo = plwvelo, parent = plparent, seated = plisseated, seatid = plseatid,\n        sprint = plsprint, jetpack = pljetpack, headlight = plheadlight }\n    return t\nend\nend)\npackage.preload['DU-logger-viewer:logger-main.lua']=(function()\n---@diagnostic disable: param-type-mismatch\n--local P=system.print\n\nlocal klist = SysData.getKeyList()\nif DEBUG and klist then\n    P(\"SysData keys:\\r\\n\"..DumpTable(klist))\nend\n\nlocal MplayerID = player.getId()\nlocal MplayerName = player.getName()\nlocal MplayerMass = player.getNanopackMass()\nlocal MplayerVolume = player.getNanopackVolume()\nlocal MplayerMaxVolume = player.getNanopackMaxVolume()\nlocal MplayerWrldPos = player.getWorldPosition()\nlocal MplayerWrldVelo = player.getWorldVelocity()\nlocal MplayerOrgIDs = player.getOrgIds()\nlocal MplayerTime = system.getUtcTime()\nlocal MplayerTimeOffset = system.getUtcOffset()\n\nlocal MplayerParentID = player.getParent()\nlocal MplayerIsSeated = player.isSeated()\nlocal MplayerSeatID = player.getSeatId()\nlocal MplayerSprinting = player.isSprinting()\nlocal MplayerIsJetpackOn = player.isJetpackOn()\nlocal MplayerIsHeadlightOn = player.isHeadlightOn()\n\nif type(klist) == \"table\" then\n    for _, v in pairs(klist) do\n        if MplayerID == v then\n            NameRecorded = 1\n        end\n    end\nend\n\nif DEBUG then P(\"Orgs: \"..#MplayerOrgIDs) end\nfor k, v in pairs(MplayerOrgIDs) do\n    local orginfo = system.getOrganization(v)\n    local dump = DumpTable(orginfo)\n    if DEBUG then P(k..\": \"..dump) end\n    OrgData.setStringValue(v,dump)\nend\n\nP(\"ID \"..MplayerID..\" \"..MplayerName..\" recorded\")\nlocal t = TableConstructor(MplayerName,MplayerMass,MplayerVolume,MplayerMaxVolume,MplayerOrgIDs,MplayerTime,MplayerTimeOffset,MplayerWrldPos,MplayerWrldVelo,MplayerParentID,MplayerIsSeated,MplayerSeatID,MplayerSprinting,MplayerIsJetpackOn,MplayerIsHeadlightOn)\nSysData.setStringValue(MplayerID, DumpTable(t))\nif DEBUG then P(SysData.getStringValue(MplayerID)) end\nend)"},{"key":4,"filter":{"slotKey":-5,"signature":"onStart()","args":[]},"code":"library.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)\nlibrary.addEventHandlers(core)\nlibrary.addEventHandlers(orgdata)\nlibrary.addEventHandlers(sysdata)"},{"key":5,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionStart',action)"},{"key":6,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionLoop',action)"},{"key":7,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onActionStop',action)"},{"key":8,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[]},"code":"system:triggerEvent('onUpdate')"},{"key":9,"filter":{"slotKey":-4,"signature":"onFlush()","args":[]},"code":"system:triggerEvent('onFlush')"},{"key":10,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onInputText',text)"},{"key":11,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent('onCameraChanged',mode)"},{"key":12,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent('onParentChanged',oldId,newId)"},{"key":13,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onDocked',id)"},{"key":14,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onUndocked',id)"},{"key":15,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onPlayerBoarded',id)"},{"key":16,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onVRStationEntered',id)"},{"key":17,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onConstructDocked',id)"},{"key":18,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent('onPvPTimer',active)"},{"key":19,"filter":{"slotKey":-1,"signature":"onStop()","args":[]},"code":"unit:triggerEvent('onStop')"},{"key":20,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent('onTimer',timerId)"},{"key":21,"filter":{"slotKey":0,"signature":"onStressChanged(stress)","args":[{"variable":"*"}]},"code":"core:triggerEvent('onStressChanged',stress)"},{"key":22,"filter":{"slotKey":-1,"signature":"onStart()","args":[]},"code":"\n\n-- DU-Logger-Viewer by tobitege, based on Jason Bloomer's LUA scripts.\n-- Wrapper for logging programming board script to log information of the\n-- current \"Player\" (and their org's IDs) into 2 separate databanks.\n-- This is basically a wrapper around the actual, main script in logger-main.k\n\n-- First some setup code to allow debugging in VSCode\n---@diagnostic disable: param-type-mismatch\npackage.path = \"lua/?.lua;util/?.lua;\"..package.path\n\nrequire('DU-logger-viewer:globals.lua')\n\nConfig.s_required = false\nlocal status, err, _ = xpcall(function() require('DU-logger-viewer:startup.lua') end, traceback)\nif not status then\n    P(\"[E] Error in startup!\")\n    if err then P(err) end\n    unit.exit()\n    return\nend\n\nif #Config.databanks ~= 2 then\n    P(\"[E] 2 databanks must be linked!\")\nelse\n    status, err, _ = xpcall(function() require('DU-logger-viewer:logger-library.lua') end, traceback)\n    if not status then\n        P(\"[E] Error in startup!\")\n        if err then P(err) end\n        unit.exit()\n        return\n    end\n\n    SysData = Config.databanks[1]\n    OrgData = Config.databanks[2]\n    status, err, _ = xpcall(function() require('DU-logger-viewer:logger-main.lua') end, traceback)\n    if not status then\n        P(\"[E] Error in logger-main!\")\n        if err then P(err) end\n    end\nend\nunit.exit()"}],"events":[],"methods":[]}